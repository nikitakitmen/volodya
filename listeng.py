import os
import json
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, CallbackContext
from telegram.error import Forbidden

# –ü–æ–¥–≥—Ä—É–∂–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –º—É–∑—ã–∫–∏ –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –≥–¥–µ —Ö—Ä–∞–Ω—è—Ç—Å—è —Ñ–∞–π–ª—ã
MUSIC_STORAGE_FILE = "music_storage.json"
MUSIC_DIR = "music_files"
CHAT_STORAGE_FILE = "chat_storage.json"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª —Å –º—É–∑—ã–∫–æ–π –∏ —á–∞—Ç–æ–≤
if os.path.exists(MUSIC_STORAGE_FILE):
    with open(MUSIC_STORAGE_FILE, 'r', encoding='utf-8') as f:
        music_storage = json.load(f)
else:
    music_storage = {}

if os.path.exists(CHAT_STORAGE_FILE):
    with open(CHAT_STORAGE_FILE, 'r', encoding='utf-8') as f:
        chat_storage = json.load(f)
else:
    chat_storage = []

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–º –æ—Ü–µ–Ω–∫–∏ —Ç—Ä–µ–∫–æ–≤ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
USER_STATE = {}


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: CallbackContext):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ü—Ä–æ—Å–ª—É—à–∞—Ç—å –º—É–∑—ã–∫—É"
    reply_keyboard = [['‚ñ∂Ô∏è –ü–æ—Å–ª—É—à–∞—Ç—å –º—É–∑—ã–∫–∏ –∫—Ä–∞—Å–∏–≤–æ–π ']]
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await update.message.reply_text('üëãüèªüëãüèª, –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ!', reply_markup=markup)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö —Ç—Ä–µ–∫–æ–≤ —Å—Ä–∞–∑—É
async def listen_music(update: Update, context: CallbackContext):
    # –ü–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ç—Ä–µ–∫–æ–≤ –ø–µ—Ä–µ—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
    if os.path.exists(MUSIC_STORAGE_FILE):
        with open(MUSIC_STORAGE_FILE, 'r', encoding='utf-8') as f:
            music_storage = json.load(f)
    else:
        music_storage = {}

    if not music_storage:
        await update.message.reply_text("–¢—Ä–µ–∫–∏ –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
        return

    for i, track_id in enumerate(music_storage.keys(), start=1):
        track = music_storage[track_id]
        file_path = track["file_path"]
        comment = track["comment"]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
        if not os.path.exists(file_path):
            await update.message.reply_text(f"–§–∞–π–ª –¥–ª—è —Ç—Ä–µ–∫–∞ ‚Ññ{i} –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —Ç—Ä–µ–∫, –µ—Å–ª–∏ —Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫ —Å –µ–≥–æ –Ω–æ–º–µ—Ä–æ–º –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
        with open(file_path, 'rb') as audio_file:
            await context.bot.send_audio(
                chat_id=update.message.chat_id,
                audio=audio_file,
                caption=f"–¢—Ä–µ–∫ ‚Ññ{i}: {comment}"
            )

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–ü–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É" –∏ "–ù–∞–∑–∞–¥"
    reply_keyboard = [['–ü–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É', '–ù–∞–∑–∞–¥']]
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=markup)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def go_back(update: Update, context: CallbackContext):
    await start(update, context)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ü–µ–Ω–∫–∏ —Ç—Ä–µ–∫–æ–≤
async def rate_music(update: Update, context: CallbackContext):
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –≤—ã–∑–æ–≤–æ–º
    if os.path.exists(MUSIC_STORAGE_FILE):
        with open(MUSIC_STORAGE_FILE, 'r', encoding='utf-8') as f:
            music_storage = json.load(f)
    else:
        music_storage = {}

    if not music_storage:
        await update.message.reply_text("–¢—Ä–µ–∫–∏ –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤
    track_names = list(music_storage.keys())
    total_tracks = len(track_names)
    page = context.user_data.get('page', 0)  # –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = page * 3
    end_idx = min(start_idx + 3, total_tracks)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É)
    reply_keyboard = []
    tracks_on_page = [f"–¢—Ä–µ–∫ {i + 1}" for i in range(start_idx, end_idx)]
    if tracks_on_page:
        reply_keyboard.append(tracks_on_page)  # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫–∏ –Ω–∞ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    navigation_buttons = []

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–ª–µ–≤–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    if page > 0:
        navigation_buttons.append("<-----")

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–ø—Ä–∞–≤–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    if end_idx < total_tracks:
        navigation_buttons.append("----->")

    # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    if navigation_buttons:
        reply_keyboard.append(navigation_buttons)

    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    reply_keyboard.append(["–ù–∞–∑–∞–¥"])

    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–∫ –¥–ª—è –æ—Ü–µ–Ω–∫–∏:', reply_markup=markup)



# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ª–∏—Å—Ç–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü
async def navigate_tracks(update: Update, context: CallbackContext):
    user_text = update.message.text

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ —Å—Ç—Ä–µ–ª–∫–∏
    if user_text == "----->":
        context.user_data['page'] = context.user_data.get('page', 0) + 1
    elif user_text == "<-----":
        context.user_data['page'] = context.user_data.get('page', 0) - 1

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç—Ä–µ–∫–æ–≤ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π
    await rate_music(update, context)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç—Ä–µ–∫–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏
async def rate_track(update: Update, context: CallbackContext):
    user_text = update.message.text

    if os.path.exists(MUSIC_STORAGE_FILE):
        with open(MUSIC_STORAGE_FILE, 'r', encoding='utf-8') as f:
            music_storage = json.load(f)
    else:
        music_storage = {}

    if user_text.startswith("–¢—Ä–µ–∫"):
        try:
            track_num = int(user_text.split()[1])
        except (IndexError, ValueError):
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–¢—Ä–µ–∫ <–Ω–æ–º–µ—Ä>'!")
            return

        if track_num > len(music_storage):
            await update.message.reply_text("–¢—Ä–µ–∫ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        track_id = list(music_storage.keys())[track_num - 1]
        context.user_data['track_id'] = track_id
        context.user_data['state'] = 'rating'

        reply_keyboard = [['‚≠êÔ∏è', '‚≠êÔ∏è‚≠êÔ∏è', '‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è'], ['‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è', '‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è'], ['–ù–∞–∑–∞–¥']]
        markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)
        await update.message.reply_text(f'–û—Ü–µ–Ω–∏—Ç–µ —Ç—Ä–µ–∫ ‚Ññ{track_num} –æ—Ç 1 –¥–æ 5 –∑–≤—ë–∑–¥:', reply_markup=markup)

    elif user_text in ['‚≠êÔ∏è', '‚≠êÔ∏è‚≠êÔ∏è', '‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è', '‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è', '‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è']:
        rating = user_text.count('‚≠êÔ∏è')
        track_id = context.user_data.get('track_id')

        if track_id:
            music_storage[track_id]['rating'] = rating

            with open(MUSIC_STORAGE_FILE, 'w', encoding='utf-8') as f:
                json.dump(music_storage, f, ensure_ascii=False, indent=4)

            context.user_data['state'] = 'bit_question'

            reply_keyboard = [
                ['‚ñ∂Ô∏è –º–Ω–µ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è (–≥0_–æ–≤–Ω–æ)'],
                ['‚ñ∂Ô∏è –Ω—É –Ω–æ—Ä–º, –Ω–æ—Ä–º–∏—Å, –¥–∞'],
                ['‚ñ∂Ô∏è –∫—Ä—É—Ç–æ, –ª–∞–π–∫!']
            ]
            markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)
            await update.message.reply_text('–ö–∞–∫ —Ç–µ–±–µ –±–∏—Ç?', reply_markup=markup)

    elif context.user_data.get('state') == 'bit_question':
        context.user_data['bit_feedback'] = user_text
        context.user_data['state'] = 'text_question'

        reply_keyboard = [
            ['‚ñ∂Ô∏è –∞ –≤ —á–µ–º —Å–º—ã—Å–ª? 0_–æ'],
            ['‚ñ∂Ô∏è –¥–∞ –ø–æ–π–¥–µ—Ç, –¥–∞, –Ω–æ—Ä–º'],
            ['‚ñ∂Ô∏è –∫—Ä—É—Ç–æ, –ª–∞–π–∫!']
        ]
        markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)
        await update.message.reply_text('–ö–∞–∫ —Ç–µ–±–µ —Ç–µ–∫—Å—Ç? –¢—ã –∂–µ —Ç–æ–∂–µ —á—É–≤—Å—Ç–≤—É–µ—à—å —ç—Ç—É –≥–ª—É–±–∏–Ω—É?)', reply_markup=markup)

    elif context.user_data.get('state') == 'text_question':
        context.user_data['text_feedback'] = user_text
        context.user_data['state'] = 'comment'

        await update.message.reply_text('–¢–µ–ø–µ—Ä—å –æ—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.')

    elif context.user_data.get('state') == 'comment':
        track_id = context.user_data.get('track_id')
        bit_feedback = context.user_data.get('bit_feedback')
        text_feedback = context.user_data.get('text_feedback')
        comment = user_text

        if track_id:
            music_storage[track_id]['user_comment'] = comment

            with open(MUSIC_STORAGE_FILE, 'w', encoding='utf-8') as f:
                json.dump(music_storage, f, ensure_ascii=False, indent=4)

            track_num = list(music_storage.keys()).index(track_id) + 1
            track_comment = music_storage[track_id]["comment"]
            rating = music_storage[track_id].get("rating", "–ù–µ—Ç –æ—Ü–µ–Ω–∫–∏")

            message_text = (
                f"–¢—Ä–µ–∫ ‚Ññ{track_num}: {track_comment}\n"
                f"–û—Ü–µ–Ω–∫–∞: {'‚≠êÔ∏è' * rating}\n"
                f"–ë–∏—Ç: {bit_feedback}\n"
                f"–¢–µ–∫—Å—Ç: {text_feedback}\n"
                f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}"
            )

            if 'file_id' not in music_storage[track_id]:
                with open(music_storage[track_id]['file_path'], 'rb') as audio_file:
                    audio_message = await context.bot.send_audio(
                        chat_id=update.message.chat_id,
                        audio=audio_file,
                        caption=message_text
                    )
                    music_storage[track_id]['file_id'] = audio_message.audio.file_id

                    with open(MUSIC_STORAGE_FILE, 'w', encoding='utf-8') as f:
                        json.dump(music_storage, f, ensure_ascii=False, indent=4)

            for chat_id in chat_storage:
                if chat_id != update.message.chat_id:
                    try:
                        if 'file_id' in music_storage[track_id]:
                            await context.bot.send_audio(
                                chat_id=chat_id,
                                audio=music_storage[track_id]['file_id'],
                                caption=message_text
                            )
                        else:
                            with open(music_storage[track_id]['file_path'], 'rb') as audio_file:
                                await context.bot.send_audio(
                                    chat_id=chat_id,
                                    audio=audio_file,
                                    caption=message_text
                                )
                    except Forbidden:
                        chat_storage.remove(chat_id)
                        with open(CHAT_STORAGE_FILE, 'w', encoding='utf-8') as f:
                            json.dump(chat_storage, f, ensure_ascii=False, indent=4)
                        print(f"–ß–∞—Ç {chat_id} –±—ã–ª —É–¥–∞–ª–µ–Ω, —É–±–∏—Ä–∞–µ–º –µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞.")

            await rate_music(update, context)

    elif user_text == "–ù–∞–∑–∞–¥":
        await go_back(update, context)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –Ω–æ–≤—ã–π —á–∞—Ç
async def bot_added_to_chat(update: Update, context: CallbackContext):
    for member in update.message.new_chat_members:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –Ω–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ —Å–∞–º–∏–º –±–æ—Ç–æ–º
        if member.id == context.bot.id:
            chat_id = update.message.chat_id

            # –ï—Å–ª–∏ —á–∞—Ç –Ω–µ –≤ —Å–ø–∏—Å–∫–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
            if chat_id not in chat_storage:
                chat_storage.append(chat_id)

                # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª —Å —á–∞—Ç–∞–º–∏
                with open(CHAT_STORAGE_FILE, 'w', encoding='utf-8') as f:
                    json.dump(chat_storage, f, ensure_ascii=False, indent=4)

            # –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –Ω–æ–≤—ã–π —á–∞—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await context.bot.send_message(
                chat_id=chat_id,
                text="–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —ç—Ç–æ—Ç —á–∞—Ç!"
            )
            break


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
if __name__ == '__main__':
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = ApplicationBuilder().token("7950692870:AAF5GO3u6cXmDaTMKyOavobZwxckCTPzBwc").build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    application.add_handler(CommandHandler('start', start))

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Å–ª—É—à–∞—Ç—å –º—É–∑—ã–∫—É"
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex("^‚ñ∂Ô∏è –ü–æ—Å–ª—É—à–∞—Ç—å –º—É–∑—ã–∫–∏ –∫—Ä–∞—Å–∏–≤–æ–π$"), listen_music))

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–ü–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É"
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex("^–ü–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É$"), rate_music))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex("^–ù–∞–∑–∞–¥$"), go_back))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Ç—Ä–µ–∫–æ–≤
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex("^(<-----|----->)$"), navigate_tracks))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç—Ä–µ–∫–∞ –∏ –æ—Ü–µ–Ω–∫–∏
    application.add_handler(MessageHandler(filters.TEXT, rate_track))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ —á–∞—Ç
    application.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, bot_added_to_chat))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()
